import { CollectionType } from 'configs/constant';

export default function useAutoGenerateCollections(
  getDropsCategoryData:any,
  settingData:any,
) {
  const autoGenerateCollectionDataInAllProducts = (
    event: string,
    hasAllProductInCollection: any,
    autoDitectedVaultSpotlight: string[],
    removeNavigationCategoryId:string,
  ) => {
    let autoGenerateCollectionData = [];
    const allProduct = getDropsCategoryData?.findByStoreId.filter((el: { parentId: null; }) => el.parentId === null).find((el: { title: string; status: string; }) => el.title === 'All Products' && el.status === 'ACTIVE');

    if (event === 'remove' && removeNavigationCategoryId) {
      autoGenerateCollectionData = [{
        ...allProduct,
        collections: allProduct.collections
          .filter(
            (el: {
                isAutoGeneratedBy: any; }) => el.isAutoGeneratedBy !== removeNavigationCategoryId,
          ),
      }];
    } else if (!settingData.parentId && settingData.categoryId !== allProduct.categoryId) {
      if (event === 'remove' && !hasAllProductInCollection) {
        autoGenerateCollectionData = [{
          ...allProduct,
          collections: !hasAllProductInCollection ? allProduct.collections
            .filter(
              (el: { isAutoGeneratedBy: any; }) => el.isAutoGeneratedBy !== settingData.categoryId,
            )
            : [...allProduct.collections],
        }];
      } else {
        const isExisting = allProduct.collections
          ?.find(
            (col: { isAutoGeneratedBy: any; }) => col?.isAutoGeneratedBy === settingData.categoryId,
          ) ?? undefined;
        autoGenerateCollectionData = [{
          ...allProduct,
          collections: hasAllProductInCollection ? [
            {
              ...hasAllProductInCollection,
              name: isExisting ? isExisting.name : settingData.title,
              type: CollectionType.REGULAR,
              shopifyId: autoDitectedVaultSpotlight.filter((el) => el)[0],
              mergedIds: autoDitectedVaultSpotlight.filter((el) => el),
              isAutoGeneratedBy: settingData.categoryId,
              isVisible: true,
            },
            ...allProduct.collections
              .filter((el: { name: any; }) => el.name !== settingData.title),
          ] : [...allProduct.collections]
            .filter(
              (el: { isAutoGeneratedBy: any; }) => el.isAutoGeneratedBy !== settingData.categoryId,
            ),
        }];
      }
    }
    if (autoGenerateCollectionData.length > 0) {
      return autoGenerateCollectionData;
    }
    return [];
  };
  return {
    autoGenerateCollectionDataInAllProducts,
  };
}
